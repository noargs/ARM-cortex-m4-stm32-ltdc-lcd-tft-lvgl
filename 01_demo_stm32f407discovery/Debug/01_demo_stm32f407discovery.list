
01_demo_stm32f407discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00070810  08001d94  08001d94  00011d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080725a4  080725a4  00090010  2**0
                  CONTENTS
  4 .ARM          00000008  080725a4  080725a4  000825a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080725ac  080725ac  00090010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080725ac  080725ac  000825ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080725b0  080725b0  000825b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080725b4  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00090010  2**0
                  CONTENTS
 10 .bss          00005048  20000010  20000010  00090010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005058  20005058  00090010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00090010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000046f7  00000000  00000000  00090040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010ed  00000000  00000000  00094737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000540  00000000  00000000  00095828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000470  00000000  00000000  00095d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000365da  00000000  00000000  000961d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005d41  00000000  00000000  000cc7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c369a  00000000  00000000  000d24f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00195b8d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000012dc  00000000  00000000  00195be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001d7c 	.word	0x08001d7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001d7c 	.word	0x08001d7c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <write_frame>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void write_frame(uint8_t *fb_addr, uint32_t nbytes)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
	bsp_lcd_set_display_area(0, BSP_LCD_ACTIVE_WIDTH-1, 0, BSP_LCD_ACTIVE_HEIGHT-1);
 80004d6:	23ef      	movs	r3, #239	; 0xef
 80004d8:	2200      	movs	r2, #0
 80004da:	f240 113f 	movw	r1, #319	; 0x13f
 80004de:	2000      	movs	r0, #0
 80004e0:	f001 fb34 	bl	8001b4c <bsp_lcd_set_display_area>
	bsp_lcd_send_cmd_mem_write();
 80004e4:	f000 ff50 	bl	8001388 <bsp_lcd_send_cmd_mem_write>
	bsp_lcd_write(fb_addr, nbytes);
 80004e8:	6839      	ldr	r1, [r7, #0]
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 ff54 	bl	8001398 <bsp_lcd_write>
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 f924 	bl	8000748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f824 	bl	800054c <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
  bsp_lcd_init();
 8000504:	f000 ff00 	bl	8001308 <bsp_lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	write_frame((uint8_t*)t1_320x240_map, (320 * 240 * 2));
 8000508:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <main+0x48>)
 800050e:	f7ff ffdd 	bl	80004cc <write_frame>
	HAL_Delay(333);
 8000512:	f240 104d 	movw	r0, #333	; 0x14d
 8000516:	f000 f989 	bl	800082c <HAL_Delay>
	write_frame((uint8_t*)t2_320x240_map,(320 * 240 * 2));
 800051a:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 800051e:	4809      	ldr	r0, [pc, #36]	; (8000544 <main+0x4c>)
 8000520:	f7ff ffd4 	bl	80004cc <write_frame>
	HAL_Delay(333);
 8000524:	f240 104d 	movw	r0, #333	; 0x14d
 8000528:	f000 f980 	bl	800082c <HAL_Delay>
	write_frame((uint8_t*)t3_320x240_map,(320 * 240 * 2));
 800052c:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <main+0x50>)
 8000532:	f7ff ffcb 	bl	80004cc <write_frame>
	HAL_Delay(333);
 8000536:	f240 104d 	movw	r0, #333	; 0x14d
 800053a:	f000 f977 	bl	800082c <HAL_Delay>
	write_frame((uint8_t*)t1_320x240_map, (320 * 240 * 2));
 800053e:	e7e3      	b.n	8000508 <main+0x10>
 8000540:	08001da4 	.word	0x08001da4
 8000544:	080275a4 	.word	0x080275a4
 8000548:	0804cda4 	.word	0x0804cda4

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	; 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2230      	movs	r2, #48	; 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fc06 	bl	8001d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a27      	ldr	r2, [pc, #156]	; (8000618 <SystemClock_Config+0xcc>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b25      	ldr	r3, [pc, #148]	; (8000618 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a21      	ldr	r2, [pc, #132]	; (800061c <SystemClock_Config+0xd0>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005bc:	2308      	movs	r3, #8
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005c0:	23a8      	movs	r3, #168	; 0xa8
 80005c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c8:	2307      	movs	r3, #7
 80005ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fa35 	bl	8000a40 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005dc:	f000 f820 	bl	8000620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2302      	movs	r3, #2
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2105      	movs	r1, #5
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fc96 	bl	8000f30 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800060a:	f000 f809 	bl	8000620 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	; 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	e7fe      	b.n	8000628 <Error_Handler+0x8>
	...

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <HAL_MspInit+0x4c>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063a:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <HAL_MspInit+0x4c>)
 800063c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000640:	6453      	str	r3, [r2, #68]	; 0x44
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <HAL_MspInit+0x4c>)
 8000644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HAL_MspInit+0x4c>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	4a08      	ldr	r2, [pc, #32]	; (8000678 <HAL_MspInit+0x4c>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	6413      	str	r3, [r2, #64]	; 0x40
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_MspInit+0x4c>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800066a:	2007      	movs	r0, #7
 800066c:	f000 f9b4 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <NMI_Handler+0x4>

08000682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <HardFault_Handler+0x4>

08000688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <MemManage_Handler+0x4>

0800068e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <BusFault_Handler+0x4>

08000694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <UsageFault_Handler+0x4>

0800069a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c8:	f000 f890 	bl	80007ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <SystemInit+0x20>)
 80006d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <SystemInit+0x20>)
 80006dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80006f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800072c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006fa:	490e      	ldr	r1, [pc, #56]	; (8000734 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006fc:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0b      	ldr	r2, [pc, #44]	; (800073c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000710:	4c0b      	ldr	r4, [pc, #44]	; (8000740 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800071e:	f7ff ffd7 	bl	80006d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000722:	f001 faff 	bl	8001d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000726:	f7ff fee7 	bl	80004f8 <main>
  bx  lr    
 800072a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800072c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000734:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000738:	080725b4 	.word	0x080725b4
  ldr r2, =_sbss
 800073c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000740:	20005058 	.word	0x20005058

08000744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000744:	e7fe      	b.n	8000744 <ADC_IRQHandler>
	...

08000748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <HAL_Init+0x40>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0d      	ldr	r2, [pc, #52]	; (8000788 <HAL_Init+0x40>)
 8000752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000756:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_Init+0x40>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <HAL_Init+0x40>)
 800075e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000762:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_Init+0x40>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a07      	ldr	r2, [pc, #28]	; (8000788 <HAL_Init+0x40>)
 800076a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800076e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f931 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000776:	2000      	movs	r0, #0
 8000778:	f000 f808 	bl	800078c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800077c:	f7ff ff56 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023c00 	.word	0x40023c00

0800078c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_InitTick+0x54>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_InitTick+0x58>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f93b 	bl	8000a26 <HAL_SYSTICK_Config>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00e      	b.n	80007d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b0f      	cmp	r3, #15
 80007be:	d80a      	bhi.n	80007d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c0:	2200      	movs	r2, #0
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007c8:	f000 f911 	bl	80009ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007cc:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <HAL_InitTick+0x5c>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007d2:	2300      	movs	r3, #0
 80007d4:	e000      	b.n	80007d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20000008 	.word	0x20000008
 80007e8:	20000004 	.word	0x20000004

080007ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_IncTick+0x20>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_IncTick+0x24>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_IncTick+0x24>)
 80007fe:	6013      	str	r3, [r2, #0]
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000008 	.word	0x20000008
 8000810:	2000002c 	.word	0x2000002c

08000814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return uwTick;
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <HAL_GetTick+0x14>)
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	2000002c 	.word	0x2000002c

0800082c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000834:	f7ff ffee 	bl	8000814 <HAL_GetTick>
 8000838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000844:	d005      	beq.n	8000852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_Delay+0x44>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4413      	add	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000852:	bf00      	nop
 8000854:	f7ff ffde 	bl	8000814 <HAL_GetTick>
 8000858:	4602      	mov	r2, r0
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	429a      	cmp	r2, r3
 8000862:	d8f7      	bhi.n	8000854 <HAL_Delay+0x28>
  {
  }
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000008 	.word	0x20000008

08000874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800089c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	60d3      	str	r3, [r2, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <__NVIC_GetPriorityGrouping+0x18>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	f003 0307 	and.w	r3, r3, #7
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db0a      	blt.n	8000902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	490c      	ldr	r1, [pc, #48]	; (8000924 <__NVIC_SetPriority+0x4c>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	0112      	lsls	r2, r2, #4
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000900:	e00a      	b.n	8000918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4908      	ldr	r1, [pc, #32]	; (8000928 <__NVIC_SetPriority+0x50>)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	3b04      	subs	r3, #4
 8000910:	0112      	lsls	r2, r2, #4
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	440b      	add	r3, r1
 8000916:	761a      	strb	r2, [r3, #24]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000e100 	.word	0xe000e100
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f1c3 0307 	rsb	r3, r3, #7
 8000946:	2b04      	cmp	r3, #4
 8000948:	bf28      	it	cs
 800094a:	2304      	movcs	r3, #4
 800094c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3304      	adds	r3, #4
 8000952:	2b06      	cmp	r3, #6
 8000954:	d902      	bls.n	800095c <NVIC_EncodePriority+0x30>
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3b03      	subs	r3, #3
 800095a:	e000      	b.n	800095e <NVIC_EncodePriority+0x32>
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	401a      	ands	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43d9      	mvns	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	4313      	orrs	r3, r2
         );
}
 8000986:	4618      	mov	r0, r3
 8000988:	3724      	adds	r7, #36	; 0x24
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a4:	d301      	bcc.n	80009aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00f      	b.n	80009ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <SysTick_Config+0x40>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b2:	210f      	movs	r1, #15
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009b8:	f7ff ff8e 	bl	80008d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <SysTick_Config+0x40>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <SysTick_Config+0x40>)
 80009c4:	2207      	movs	r2, #7
 80009c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	e000e010 	.word	0xe000e010

080009d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff47 	bl	8000874 <__NVIC_SetPriorityGrouping>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a00:	f7ff ff5c 	bl	80008bc <__NVIC_GetPriorityGrouping>
 8000a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	6978      	ldr	r0, [r7, #20]
 8000a0c:	f7ff ff8e 	bl	800092c <NVIC_EncodePriority>
 8000a10:	4602      	mov	r2, r0
 8000a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff5d 	bl	80008d8 <__NVIC_SetPriority>
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ffb0 	bl	8000994 <SysTick_Config>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e267      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d075      	beq.n	8000b4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a5e:	4b88      	ldr	r3, [pc, #544]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	f003 030c 	and.w	r3, r3, #12
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	d00c      	beq.n	8000a84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a6a:	4b85      	ldr	r3, [pc, #532]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a72:	2b08      	cmp	r3, #8
 8000a74:	d112      	bne.n	8000a9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a76:	4b82      	ldr	r3, [pc, #520]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000a82:	d10b      	bne.n	8000a9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a84:	4b7e      	ldr	r3, [pc, #504]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d05b      	beq.n	8000b48 <HAL_RCC_OscConfig+0x108>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d157      	bne.n	8000b48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e242      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aa4:	d106      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x74>
 8000aa6:	4b76      	ldr	r3, [pc, #472]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a75      	ldr	r2, [pc, #468]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab0:	6013      	str	r3, [r2, #0]
 8000ab2:	e01d      	b.n	8000af0 <HAL_RCC_OscConfig+0xb0>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000abc:	d10c      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x98>
 8000abe:	4b70      	ldr	r3, [pc, #448]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a6f      	ldr	r2, [pc, #444]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	4b6d      	ldr	r3, [pc, #436]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a6c      	ldr	r2, [pc, #432]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ad4:	6013      	str	r3, [r2, #0]
 8000ad6:	e00b      	b.n	8000af0 <HAL_RCC_OscConfig+0xb0>
 8000ad8:	4b69      	ldr	r3, [pc, #420]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a68      	ldr	r2, [pc, #416]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ae2:	6013      	str	r3, [r2, #0]
 8000ae4:	4b66      	ldr	r3, [pc, #408]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a65      	ldr	r2, [pc, #404]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d013      	beq.n	8000b20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af8:	f7ff fe8c 	bl	8000814 <HAL_GetTick>
 8000afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000afe:	e008      	b.n	8000b12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b00:	f7ff fe88 	bl	8000814 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	2b64      	cmp	r3, #100	; 0x64
 8000b0c:	d901      	bls.n	8000b12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	e207      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b12:	4b5b      	ldr	r3, [pc, #364]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d0f0      	beq.n	8000b00 <HAL_RCC_OscConfig+0xc0>
 8000b1e:	e014      	b.n	8000b4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b20:	f7ff fe78 	bl	8000814 <HAL_GetTick>
 8000b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b26:	e008      	b.n	8000b3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b28:	f7ff fe74 	bl	8000814 <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	2b64      	cmp	r3, #100	; 0x64
 8000b34:	d901      	bls.n	8000b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b36:	2303      	movs	r3, #3
 8000b38:	e1f3      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b3a:	4b51      	ldr	r3, [pc, #324]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d1f0      	bne.n	8000b28 <HAL_RCC_OscConfig+0xe8>
 8000b46:	e000      	b.n	8000b4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d063      	beq.n	8000c1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b56:	4b4a      	ldr	r3, [pc, #296]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	f003 030c 	and.w	r3, r3, #12
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d00b      	beq.n	8000b7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b62:	4b47      	ldr	r3, [pc, #284]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d11c      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b6e:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d116      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b7a:	4b41      	ldr	r3, [pc, #260]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d005      	beq.n	8000b92 <HAL_RCC_OscConfig+0x152>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d001      	beq.n	8000b92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e1c7      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b92:	4b3b      	ldr	r3, [pc, #236]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	4937      	ldr	r1, [pc, #220]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ba6:	e03a      	b.n	8000c1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d020      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bb0:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <HAL_RCC_OscConfig+0x244>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bb6:	f7ff fe2d 	bl	8000814 <HAL_GetTick>
 8000bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bbc:	e008      	b.n	8000bd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bbe:	f7ff fe29 	bl	8000814 <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d901      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e1a8      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bd0:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d0f0      	beq.n	8000bbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bdc:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	4925      	ldr	r1, [pc, #148]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000bec:	4313      	orrs	r3, r2
 8000bee:	600b      	str	r3, [r1, #0]
 8000bf0:	e015      	b.n	8000c1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <HAL_RCC_OscConfig+0x244>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fe0c 	bl	8000814 <HAL_GetTick>
 8000bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bfe:	e008      	b.n	8000c12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c00:	f7ff fe08 	bl	8000814 <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d901      	bls.n	8000c12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	e187      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1f0      	bne.n	8000c00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0308 	and.w	r3, r3, #8
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d036      	beq.n	8000c98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d016      	beq.n	8000c60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_RCC_OscConfig+0x248>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c38:	f7ff fdec 	bl	8000814 <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c40:	f7ff fde8 	bl	8000814 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e167      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_RCC_OscConfig+0x240>)
 8000c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f0      	beq.n	8000c40 <HAL_RCC_OscConfig+0x200>
 8000c5e:	e01b      	b.n	8000c98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_RCC_OscConfig+0x248>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c66:	f7ff fdd5 	bl	8000814 <HAL_GetTick>
 8000c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c6c:	e00e      	b.n	8000c8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c6e:	f7ff fdd1 	bl	8000814 <HAL_GetTick>
 8000c72:	4602      	mov	r2, r0
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d907      	bls.n	8000c8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	e150      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
 8000c80:	40023800 	.word	0x40023800
 8000c84:	42470000 	.word	0x42470000
 8000c88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c8c:	4b88      	ldr	r3, [pc, #544]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1ea      	bne.n	8000c6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f000 8097 	beq.w	8000dd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000caa:	4b81      	ldr	r3, [pc, #516]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10f      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a7c      	ldr	r2, [pc, #496]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b7a      	ldr	r3, [pc, #488]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd6:	4b77      	ldr	r3, [pc, #476]	; (8000eb4 <HAL_RCC_OscConfig+0x474>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d118      	bne.n	8000d14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ce2:	4b74      	ldr	r3, [pc, #464]	; (8000eb4 <HAL_RCC_OscConfig+0x474>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a73      	ldr	r2, [pc, #460]	; (8000eb4 <HAL_RCC_OscConfig+0x474>)
 8000ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cee:	f7ff fd91 	bl	8000814 <HAL_GetTick>
 8000cf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf4:	e008      	b.n	8000d08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cf6:	f7ff fd8d 	bl	8000814 <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d901      	bls.n	8000d08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000d04:	2303      	movs	r3, #3
 8000d06:	e10c      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d08:	4b6a      	ldr	r3, [pc, #424]	; (8000eb4 <HAL_RCC_OscConfig+0x474>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f0      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d106      	bne.n	8000d2a <HAL_RCC_OscConfig+0x2ea>
 8000d1c:	4b64      	ldr	r3, [pc, #400]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d20:	4a63      	ldr	r2, [pc, #396]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6713      	str	r3, [r2, #112]	; 0x70
 8000d28:	e01c      	b.n	8000d64 <HAL_RCC_OscConfig+0x324>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2b05      	cmp	r3, #5
 8000d30:	d10c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x30c>
 8000d32:	4b5f      	ldr	r3, [pc, #380]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d36:	4a5e      	ldr	r2, [pc, #376]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d42:	4a5b      	ldr	r2, [pc, #364]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6713      	str	r3, [r2, #112]	; 0x70
 8000d4a:	e00b      	b.n	8000d64 <HAL_RCC_OscConfig+0x324>
 8000d4c:	4b58      	ldr	r3, [pc, #352]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d50:	4a57      	ldr	r2, [pc, #348]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000d52:	f023 0301 	bic.w	r3, r3, #1
 8000d56:	6713      	str	r3, [r2, #112]	; 0x70
 8000d58:	4b55      	ldr	r3, [pc, #340]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d5c:	4a54      	ldr	r2, [pc, #336]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000d5e:	f023 0304 	bic.w	r3, r3, #4
 8000d62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d015      	beq.n	8000d98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d6c:	f7ff fd52 	bl	8000814 <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d72:	e00a      	b.n	8000d8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d74:	f7ff fd4e 	bl	8000814 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e0cb      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0ee      	beq.n	8000d74 <HAL_RCC_OscConfig+0x334>
 8000d96:	e014      	b.n	8000dc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d98:	f7ff fd3c 	bl	8000814 <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d9e:	e00a      	b.n	8000db6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000da0:	f7ff fd38 	bl	8000814 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e0b5      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db6:	4b3e      	ldr	r3, [pc, #248]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1ee      	bne.n	8000da0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000dc2:	7dfb      	ldrb	r3, [r7, #23]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d105      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dc8:	4b39      	ldr	r3, [pc, #228]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	4a38      	ldr	r2, [pc, #224]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 80a1 	beq.w	8000f20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000dde:	4b34      	ldr	r3, [pc, #208]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f003 030c 	and.w	r3, r3, #12
 8000de6:	2b08      	cmp	r3, #8
 8000de8:	d05c      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d141      	bne.n	8000e76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000df2:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <HAL_RCC_OscConfig+0x478>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df8:	f7ff fd0c 	bl	8000814 <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e00:	f7ff fd08 	bl	8000814 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e087      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1f0      	bne.n	8000e00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69da      	ldr	r2, [r3, #28]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	431a      	orrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	019b      	lsls	r3, r3, #6
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e34:	085b      	lsrs	r3, r3, #1
 8000e36:	3b01      	subs	r3, #1
 8000e38:	041b      	lsls	r3, r3, #16
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e40:	061b      	lsls	r3, r3, #24
 8000e42:	491b      	ldr	r1, [pc, #108]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000e44:	4313      	orrs	r3, r2
 8000e46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <HAL_RCC_OscConfig+0x478>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4e:	f7ff fce1 	bl	8000814 <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e56:	f7ff fcdd 	bl	8000814 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e05c      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCC_OscConfig+0x416>
 8000e74:	e054      	b.n	8000f20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <HAL_RCC_OscConfig+0x478>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fcca 	bl	8000814 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e84:	f7ff fcc6 	bl	8000814 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e045      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_RCC_OscConfig+0x470>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f0      	bne.n	8000e84 <HAL_RCC_OscConfig+0x444>
 8000ea2:	e03d      	b.n	8000f20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d107      	bne.n	8000ebc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e038      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40007000 	.word	0x40007000
 8000eb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <HAL_RCC_OscConfig+0x4ec>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d028      	beq.n	8000f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d121      	bne.n	8000f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d11a      	bne.n	8000f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000eec:	4013      	ands	r3, r2
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ef2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d111      	bne.n	8000f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	3b01      	subs	r3, #1
 8000f06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d107      	bne.n	8000f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d001      	beq.n	8000f20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e0cc      	b.n	80010de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f44:	4b68      	ldr	r3, [pc, #416]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d90c      	bls.n	8000f6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f52:	4b65      	ldr	r3, [pc, #404]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f5a:	4b63      	ldr	r3, [pc, #396]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d001      	beq.n	8000f6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e0b8      	b.n	80010de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d020      	beq.n	8000fba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f84:	4b59      	ldr	r3, [pc, #356]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4a58      	ldr	r2, [pc, #352]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 8000f8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0308 	and.w	r3, r3, #8
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d005      	beq.n	8000fa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f9c:	4b53      	ldr	r3, [pc, #332]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	4a52      	ldr	r2, [pc, #328]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 8000fa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000fa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fa8:	4b50      	ldr	r3, [pc, #320]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	494d      	ldr	r1, [pc, #308]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d044      	beq.n	8001050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d107      	bne.n	8000fde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fce:	4b47      	ldr	r3, [pc, #284]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d119      	bne.n	800100e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e07f      	b.n	80010de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d003      	beq.n	8000fee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d107      	bne.n	8000ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fee:	4b3f      	ldr	r3, [pc, #252]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d109      	bne.n	800100e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e06f      	b.n	80010de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e067      	b.n	80010de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800100e:	4b37      	ldr	r3, [pc, #220]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f023 0203 	bic.w	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	4934      	ldr	r1, [pc, #208]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 800101c:	4313      	orrs	r3, r2
 800101e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001020:	f7ff fbf8 	bl	8000814 <HAL_GetTick>
 8001024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001026:	e00a      	b.n	800103e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001028:	f7ff fbf4 	bl	8000814 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	f241 3288 	movw	r2, #5000	; 0x1388
 8001036:	4293      	cmp	r3, r2
 8001038:	d901      	bls.n	800103e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e04f      	b.n	80010de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800103e:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 020c 	and.w	r2, r3, #12
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	429a      	cmp	r2, r3
 800104e:	d1eb      	bne.n	8001028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d20c      	bcs.n	8001078 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d001      	beq.n	8001078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e032      	b.n	80010de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	2b00      	cmp	r3, #0
 8001082:	d008      	beq.n	8001096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	4916      	ldr	r1, [pc, #88]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 8001092:	4313      	orrs	r3, r2
 8001094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d009      	beq.n	80010b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	490e      	ldr	r1, [pc, #56]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010b6:	f000 f821 	bl	80010fc <HAL_RCC_GetSysClockFreq>
 80010ba:	4602      	mov	r2, r0
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	490a      	ldr	r1, [pc, #40]	; (80010f0 <HAL_RCC_ClockConfig+0x1c0>)
 80010c8:	5ccb      	ldrb	r3, [r1, r3]
 80010ca:	fa22 f303 	lsr.w	r3, r2, r3
 80010ce:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_RCC_ClockConfig+0x1c8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fb58 	bl	800078c <HAL_InitTick>

  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023c00 	.word	0x40023c00
 80010ec:	40023800 	.word	0x40023800
 80010f0:	08001d94 	.word	0x08001d94
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001100:	b094      	sub	sp, #80	; 0x50
 8001102:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001104:	2300      	movs	r3, #0
 8001106:	647b      	str	r3, [r7, #68]	; 0x44
 8001108:	2300      	movs	r3, #0
 800110a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800110c:	2300      	movs	r3, #0
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001114:	4b79      	ldr	r3, [pc, #484]	; (80012fc <HAL_RCC_GetSysClockFreq+0x200>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 030c 	and.w	r3, r3, #12
 800111c:	2b08      	cmp	r3, #8
 800111e:	d00d      	beq.n	800113c <HAL_RCC_GetSysClockFreq+0x40>
 8001120:	2b08      	cmp	r3, #8
 8001122:	f200 80e1 	bhi.w	80012e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <HAL_RCC_GetSysClockFreq+0x34>
 800112a:	2b04      	cmp	r3, #4
 800112c:	d003      	beq.n	8001136 <HAL_RCC_GetSysClockFreq+0x3a>
 800112e:	e0db      	b.n	80012e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001130:	4b73      	ldr	r3, [pc, #460]	; (8001300 <HAL_RCC_GetSysClockFreq+0x204>)
 8001132:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001134:	e0db      	b.n	80012ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001136:	4b73      	ldr	r3, [pc, #460]	; (8001304 <HAL_RCC_GetSysClockFreq+0x208>)
 8001138:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800113a:	e0d8      	b.n	80012ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800113c:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <HAL_RCC_GetSysClockFreq+0x200>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001144:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001146:	4b6d      	ldr	r3, [pc, #436]	; (80012fc <HAL_RCC_GetSysClockFreq+0x200>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d063      	beq.n	800121a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001152:	4b6a      	ldr	r3, [pc, #424]	; (80012fc <HAL_RCC_GetSysClockFreq+0x200>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	099b      	lsrs	r3, r3, #6
 8001158:	2200      	movs	r2, #0
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
 800115c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800115e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
 8001166:	2300      	movs	r3, #0
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
 800116a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800116e:	4622      	mov	r2, r4
 8001170:	462b      	mov	r3, r5
 8001172:	f04f 0000 	mov.w	r0, #0
 8001176:	f04f 0100 	mov.w	r1, #0
 800117a:	0159      	lsls	r1, r3, #5
 800117c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001180:	0150      	lsls	r0, r2, #5
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4621      	mov	r1, r4
 8001188:	1a51      	subs	r1, r2, r1
 800118a:	6139      	str	r1, [r7, #16]
 800118c:	4629      	mov	r1, r5
 800118e:	eb63 0301 	sbc.w	r3, r3, r1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80011a0:	4659      	mov	r1, fp
 80011a2:	018b      	lsls	r3, r1, #6
 80011a4:	4651      	mov	r1, sl
 80011a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011aa:	4651      	mov	r1, sl
 80011ac:	018a      	lsls	r2, r1, #6
 80011ae:	4651      	mov	r1, sl
 80011b0:	ebb2 0801 	subs.w	r8, r2, r1
 80011b4:	4659      	mov	r1, fp
 80011b6:	eb63 0901 	sbc.w	r9, r3, r1
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	f04f 0300 	mov.w	r3, #0
 80011c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011ce:	4690      	mov	r8, r2
 80011d0:	4699      	mov	r9, r3
 80011d2:	4623      	mov	r3, r4
 80011d4:	eb18 0303 	adds.w	r3, r8, r3
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	462b      	mov	r3, r5
 80011dc:	eb49 0303 	adc.w	r3, r9, r3
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80011ee:	4629      	mov	r1, r5
 80011f0:	024b      	lsls	r3, r1, #9
 80011f2:	4621      	mov	r1, r4
 80011f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80011f8:	4621      	mov	r1, r4
 80011fa:	024a      	lsls	r2, r1, #9
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001202:	2200      	movs	r2, #0
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
 8001206:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001208:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800120c:	f7fe ffdc 	bl	80001c8 <__aeabi_uldivmod>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4613      	mov	r3, r2
 8001216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001218:	e058      	b.n	80012cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800121a:	4b38      	ldr	r3, [pc, #224]	; (80012fc <HAL_RCC_GetSysClockFreq+0x200>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	099b      	lsrs	r3, r3, #6
 8001220:	2200      	movs	r2, #0
 8001222:	4618      	mov	r0, r3
 8001224:	4611      	mov	r1, r2
 8001226:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800122a:	623b      	str	r3, [r7, #32]
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
 8001230:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001234:	4642      	mov	r2, r8
 8001236:	464b      	mov	r3, r9
 8001238:	f04f 0000 	mov.w	r0, #0
 800123c:	f04f 0100 	mov.w	r1, #0
 8001240:	0159      	lsls	r1, r3, #5
 8001242:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001246:	0150      	lsls	r0, r2, #5
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4641      	mov	r1, r8
 800124e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001252:	4649      	mov	r1, r9
 8001254:	eb63 0b01 	sbc.w	fp, r3, r1
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	f04f 0300 	mov.w	r3, #0
 8001260:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001264:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001268:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800126c:	ebb2 040a 	subs.w	r4, r2, sl
 8001270:	eb63 050b 	sbc.w	r5, r3, fp
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	00eb      	lsls	r3, r5, #3
 800127e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001282:	00e2      	lsls	r2, r4, #3
 8001284:	4614      	mov	r4, r2
 8001286:	461d      	mov	r5, r3
 8001288:	4643      	mov	r3, r8
 800128a:	18e3      	adds	r3, r4, r3
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	464b      	mov	r3, r9
 8001290:	eb45 0303 	adc.w	r3, r5, r3
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	f04f 0300 	mov.w	r3, #0
 800129e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80012a2:	4629      	mov	r1, r5
 80012a4:	028b      	lsls	r3, r1, #10
 80012a6:	4621      	mov	r1, r4
 80012a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80012ac:	4621      	mov	r1, r4
 80012ae:	028a      	lsls	r2, r1, #10
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012b6:	2200      	movs	r2, #0
 80012b8:	61bb      	str	r3, [r7, #24]
 80012ba:	61fa      	str	r2, [r7, #28]
 80012bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012c0:	f7fe ff82 	bl	80001c8 <__aeabi_uldivmod>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4613      	mov	r3, r2
 80012ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_RCC_GetSysClockFreq+0x200>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	0c1b      	lsrs	r3, r3, #16
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	3301      	adds	r3, #1
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80012dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80012e6:	e002      	b.n	80012ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_RCC_GetSysClockFreq+0x204>)
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80012ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3750      	adds	r7, #80	; 0x50
 80012f4:	46bd      	mov	sp, r7
 80012f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	00f42400 	.word	0x00f42400
 8001304:	007a1200 	.word	0x007a1200

08001308 <bsp_lcd_init>:




void bsp_lcd_init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	lcd_pin_init();
 800130c:	f000 f8a8 	bl	8001460 <lcd_pin_init>
	lcd_spi_init();
 8001310:	f000 f9c6 	bl	80016a0 <lcd_spi_init>
	lcd_spi_enable();
 8001314:	f000 f9b4 	bl	8001680 <lcd_spi_enable>
	lcd_handle.orientation = BSP_LCD_ORIENTATION;
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <bsp_lcd_init+0x78>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
	lcd_handle.pixel_format = BSP_LCD_PIXEL_FMT;
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <bsp_lcd_init+0x78>)
 8001320:	2202      	movs	r2, #2
 8001322:	705a      	strb	r2, [r3, #1]
	lcd_reset();
 8001324:	f000 fa2a 	bl	800177c <lcd_reset>
	lcd_config();
 8001328:	f000 fa56 	bl	80017d8 <lcd_config>
	hlcd->area.x1 = 0;
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <bsp_lcd_init+0x7c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2200      	movs	r2, #0
 8001332:	831a      	strh	r2, [r3, #24]
	hlcd->area.x2 = BSP_LCD_ACTIVE_WIDTH-1;
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <bsp_lcd_init+0x7c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f240 123f 	movw	r2, #319	; 0x13f
 800133c:	835a      	strh	r2, [r3, #26]
	hlcd->area.y1 = 0;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <bsp_lcd_init+0x7c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2200      	movs	r2, #0
 8001344:	839a      	strh	r2, [r3, #28]
	hlcd->area.y2 = BSP_LCD_ACTIVE_HEIGHT-1;
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <bsp_lcd_init+0x7c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	22ef      	movs	r2, #239	; 0xef
 800134c:	83da      	strh	r2, [r3, #30]
	lcd_set_display_area(&hlcd->area);
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <bsp_lcd_init+0x7c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3318      	adds	r3, #24
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fc19 	bl	8001b8c <lcd_set_display_area>
	lcd_set_orientation(hlcd->orientation);
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <bsp_lcd_init+0x7c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fb4d 	bl	8001a00 <lcd_set_orientation>
	lcd_buffer_init(hlcd);
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <bsp_lcd_init+0x7c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fc50 	bl	8001c10 <lcd_buffer_init>
	lcd_dma_init(hlcd);
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <bsp_lcd_init+0x7c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 fc65 	bl	8001c44 <lcd_dma_init>
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000030 	.word	0x20000030
 8001384:	2000000c 	.word	0x2000000c

08001388 <bsp_lcd_send_cmd_mem_write>:
{
	lcd_set_orientation(orientation);
}

void bsp_lcd_send_cmd_mem_write(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	lcd_write_cmd(ILI9341_GRAM);
 800138c:	202c      	movs	r0, #44	; 0x2c
 800138e:	f000 fb55 	bl	8001a3c <lcd_write_cmd>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <bsp_lcd_write>:
{
	return (void*)hlcd->draw_buffer2;
}

void bsp_lcd_write(uint8_t *buffer, uint32_t nbytes)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	uint16_t *buff_ptr;

	__disable_spi();
 80013a2:	bf00      	nop
 80013a4:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <bsp_lcd_write+0xc0>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f9      	bne.n	80013a4 <bsp_lcd_write+0xc>
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <bsp_lcd_write+0xc0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a28      	ldr	r2, [pc, #160]	; (8001458 <bsp_lcd_write+0xc0>)
 80013b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013ba:	6013      	str	r3, [r2, #0]
	__spi_set_dff_16bit();
 80013bc:	4b26      	ldr	r3, [pc, #152]	; (8001458 <bsp_lcd_write+0xc0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a25      	ldr	r2, [pc, #148]	; (8001458 <bsp_lcd_write+0xc0>)
 80013c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013c6:	6013      	str	r3, [r2, #0]
	__enable_spi();
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <bsp_lcd_write+0xc0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a22      	ldr	r2, [pc, #136]	; (8001458 <bsp_lcd_write+0xc0>)
 80013ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d2:	6013      	str	r3, [r2, #0]

	LCD_CSX_LOW();
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <bsp_lcd_write+0xc4>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	4a20      	ldr	r2, [pc, #128]	; (800145c <bsp_lcd_write+0xc4>)
 80013da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013de:	6153      	str	r3, [r2, #20]

	buff_ptr = (uint16_t*)buffer;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	60fb      	str	r3, [r7, #12]
	while(nbytes){
 80013e4:	e010      	b.n	8001408 <bsp_lcd_write+0x70>
		while(!REG_READ_BIT(SPI->SR,SPI_SR_TXE_Pos));
 80013e6:	bf00      	nop
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <bsp_lcd_write+0xc0>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f9      	beq.n	80013e8 <bsp_lcd_write+0x50>
		REG_WRITE(SPI->DR,*buff_ptr);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	881a      	ldrh	r2, [r3, #0]
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <bsp_lcd_write+0xc0>)
 80013fa:	60da      	str	r2, [r3, #12]
		++buff_ptr;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3302      	adds	r3, #2
 8001400:	60fb      	str	r3, [r7, #12]
		nbytes -= 2;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	3b02      	subs	r3, #2
 8001406:	603b      	str	r3, [r7, #0]
	while(nbytes){
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1eb      	bne.n	80013e6 <bsp_lcd_write+0x4e>
	}

	__disable_spi();
 800140e:	bf00      	nop
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <bsp_lcd_write+0xc0>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f9      	bne.n	8001410 <bsp_lcd_write+0x78>
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <bsp_lcd_write+0xc0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <bsp_lcd_write+0xc0>)
 8001422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001426:	6013      	str	r3, [r2, #0]
	LCD_CSX_HIGH();
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <bsp_lcd_write+0xc4>)
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	4a0b      	ldr	r2, [pc, #44]	; (800145c <bsp_lcd_write+0xc4>)
 800142e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001432:	6153      	str	r3, [r2, #20]
	__spi_set_dff_8bit();
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <bsp_lcd_write+0xc0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <bsp_lcd_write+0xc0>)
 800143a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800143e:	6013      	str	r3, [r2, #0]
	__enable_spi();
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <bsp_lcd_write+0xc0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <bsp_lcd_write+0xc0>)
 8001446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800144a:	6013      	str	r3, [r2, #0]

}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40003800 	.word	0x40003800
 800145c:	40020400 	.word	0x40020400

08001460 <lcd_pin_init>:




 void lcd_pin_init(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
	RCC_TypeDef *pRCC = RCC;
 8001466:	4b82      	ldr	r3, [pc, #520]	; (8001670 <lcd_pin_init+0x210>)
 8001468:	607b      	str	r3, [r7, #4]

	/* Enable the clock for GPIOB,GPIOC, GPIOD  peripherals */
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOBEN_Pos);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f043 0202 	orr.w	r2, r3, #2
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	631a      	str	r2, [r3, #48]	; 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOCEN_Pos);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f043 0204 	orr.w	r2, r3, #4
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIODEN_Pos);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f043 0208 	orr.w	r2, r3, #8
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	631a      	str	r2, [r3, #48]	; 0x30

	//RESX
	REG_SET_VAL(LCD_RESX_PORT->MODER,0x1U,0x3,(LCD_RESX_PIN * 2U)); 		/*mode*/
 800148e:	4b79      	ldr	r3, [pc, #484]	; (8001674 <lcd_pin_init+0x214>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a78      	ldr	r2, [pc, #480]	; (8001674 <lcd_pin_init+0x214>)
 8001494:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b76      	ldr	r3, [pc, #472]	; (8001674 <lcd_pin_init+0x214>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a75      	ldr	r2, [pc, #468]	; (8001674 <lcd_pin_init+0x214>)
 80014a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014a4:	6013      	str	r3, [r2, #0]
	REG_CLR_BIT(LCD_RESX_PORT->OTYPER,LCD_RESX_PIN); 						/*Output type*/
 80014a6:	4b73      	ldr	r3, [pc, #460]	; (8001674 <lcd_pin_init+0x214>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4a72      	ldr	r2, [pc, #456]	; (8001674 <lcd_pin_init+0x214>)
 80014ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014b0:	6053      	str	r3, [r2, #4]
	REG_SET_VAL(LCD_RESX_PORT->OSPEEDR,2U,0x3U,(LCD_RESX_PIN * 2U)); 		/*speed*/
 80014b2:	4b70      	ldr	r3, [pc, #448]	; (8001674 <lcd_pin_init+0x214>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	4a6f      	ldr	r2, [pc, #444]	; (8001674 <lcd_pin_init+0x214>)
 80014b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80014bc:	6093      	str	r3, [r2, #8]
 80014be:	4b6d      	ldr	r3, [pc, #436]	; (8001674 <lcd_pin_init+0x214>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	4a6c      	ldr	r2, [pc, #432]	; (8001674 <lcd_pin_init+0x214>)
 80014c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014c8:	6093      	str	r3, [r2, #8]



	//D/CX
	REG_SET_VAL(LCD_DCX_PORT->MODER,0x1U,0x3,(LCD_DCX_PIN * 2U)); 		/*mode*/
 80014ca:	4b6a      	ldr	r3, [pc, #424]	; (8001674 <lcd_pin_init+0x214>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a69      	ldr	r2, [pc, #420]	; (8001674 <lcd_pin_init+0x214>)
 80014d0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b67      	ldr	r3, [pc, #412]	; (8001674 <lcd_pin_init+0x214>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a66      	ldr	r2, [pc, #408]	; (8001674 <lcd_pin_init+0x214>)
 80014dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e0:	6013      	str	r3, [r2, #0]
	REG_CLR_BIT(LCD_DCX_PORT->OTYPER,LCD_DCX_PIN); 					/*Output type*/
 80014e2:	4b64      	ldr	r3, [pc, #400]	; (8001674 <lcd_pin_init+0x214>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4a63      	ldr	r2, [pc, #396]	; (8001674 <lcd_pin_init+0x214>)
 80014e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014ec:	6053      	str	r3, [r2, #4]
	REG_SET_VAL(LCD_DCX_PORT->OSPEEDR,2U,0x3U,(LCD_DCX_PIN * 2U)); 		/*speed*/
 80014ee:	4b61      	ldr	r3, [pc, #388]	; (8001674 <lcd_pin_init+0x214>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	4a60      	ldr	r2, [pc, #384]	; (8001674 <lcd_pin_init+0x214>)
 80014f4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80014f8:	6093      	str	r3, [r2, #8]
 80014fa:	4b5e      	ldr	r3, [pc, #376]	; (8001674 <lcd_pin_init+0x214>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	4a5d      	ldr	r2, [pc, #372]	; (8001674 <lcd_pin_init+0x214>)
 8001500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001504:	6093      	str	r3, [r2, #8]

	//SCL PB13
	REG_SET_VAL(LCD_SCL_PORT->MODER,2U,0x3U,(LCD_SCL_PIN * 2U));
 8001506:	4b5c      	ldr	r3, [pc, #368]	; (8001678 <lcd_pin_init+0x218>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a5b      	ldr	r2, [pc, #364]	; (8001678 <lcd_pin_init+0x218>)
 800150c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b59      	ldr	r3, [pc, #356]	; (8001678 <lcd_pin_init+0x218>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a58      	ldr	r2, [pc, #352]	; (8001678 <lcd_pin_init+0x218>)
 8001518:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800151c:	6013      	str	r3, [r2, #0]
	REG_CLR_BIT(LCD_SCL_PORT->OTYPER,LCD_SCL_PIN);
 800151e:	4b56      	ldr	r3, [pc, #344]	; (8001678 <lcd_pin_init+0x218>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4a55      	ldr	r2, [pc, #340]	; (8001678 <lcd_pin_init+0x218>)
 8001524:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001528:	6053      	str	r3, [r2, #4]
	REG_SET_VAL(LCD_SCL_PORT->OSPEEDR,2U,0x3U,(LCD_SCL_PIN * 2U));
 800152a:	4b53      	ldr	r3, [pc, #332]	; (8001678 <lcd_pin_init+0x218>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	4a52      	ldr	r2, [pc, #328]	; (8001678 <lcd_pin_init+0x218>)
 8001530:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001534:	6093      	str	r3, [r2, #8]
 8001536:	4b50      	ldr	r3, [pc, #320]	; (8001678 <lcd_pin_init+0x218>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	4a4f      	ldr	r2, [pc, #316]	; (8001678 <lcd_pin_init+0x218>)
 800153c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001540:	6093      	str	r3, [r2, #8]
	REG_SET_VAL(LCD_SCL_PORT->AFR[1],5U,0xFU,((LCD_SCL_PIN %8) * 4U));
 8001542:	4b4d      	ldr	r3, [pc, #308]	; (8001678 <lcd_pin_init+0x218>)
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	4a4c      	ldr	r2, [pc, #304]	; (8001678 <lcd_pin_init+0x218>)
 8001548:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800154c:	6253      	str	r3, [r2, #36]	; 0x24
 800154e:	4b4a      	ldr	r3, [pc, #296]	; (8001678 <lcd_pin_init+0x218>)
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	4a49      	ldr	r2, [pc, #292]	; (8001678 <lcd_pin_init+0x218>)
 8001554:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001558:	6253      	str	r3, [r2, #36]	; 0x24

	//SPI_SDI(PB15)(PICO)
	REG_SET_VAL(LCD_SDI_PORT->MODER,2U,0x3U,(LCD_SDI_PIN * 2U));
 800155a:	4b47      	ldr	r3, [pc, #284]	; (8001678 <lcd_pin_init+0x218>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a46      	ldr	r2, [pc, #280]	; (8001678 <lcd_pin_init+0x218>)
 8001560:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b44      	ldr	r3, [pc, #272]	; (8001678 <lcd_pin_init+0x218>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a43      	ldr	r2, [pc, #268]	; (8001678 <lcd_pin_init+0x218>)
 800156c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001570:	6013      	str	r3, [r2, #0]
	REG_CLR_BIT(LCD_SDI_PORT->OTYPER,LCD_SDI_PIN);
 8001572:	4b41      	ldr	r3, [pc, #260]	; (8001678 <lcd_pin_init+0x218>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4a40      	ldr	r2, [pc, #256]	; (8001678 <lcd_pin_init+0x218>)
 8001578:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800157c:	6053      	str	r3, [r2, #4]
	REG_SET_VAL(LCD_SDI_PORT->OSPEEDR,2U,0x3U,(LCD_SDI_PIN * 2U));
 800157e:	4b3e      	ldr	r3, [pc, #248]	; (8001678 <lcd_pin_init+0x218>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	4a3d      	ldr	r2, [pc, #244]	; (8001678 <lcd_pin_init+0x218>)
 8001584:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001588:	6093      	str	r3, [r2, #8]
 800158a:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <lcd_pin_init+0x218>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	4a3a      	ldr	r2, [pc, #232]	; (8001678 <lcd_pin_init+0x218>)
 8001590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001594:	6093      	str	r3, [r2, #8]
	REG_SET_VAL(LCD_SDI_PORT->AFR[1],5U,0xFU,((LCD_SDI_PIN % 8) * 4U));
 8001596:	4b38      	ldr	r3, [pc, #224]	; (8001678 <lcd_pin_init+0x218>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	4a37      	ldr	r2, [pc, #220]	; (8001678 <lcd_pin_init+0x218>)
 800159c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80015a0:	6253      	str	r3, [r2, #36]	; 0x24
 80015a2:	4b35      	ldr	r3, [pc, #212]	; (8001678 <lcd_pin_init+0x218>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	4a34      	ldr	r2, [pc, #208]	; (8001678 <lcd_pin_init+0x218>)
 80015a8:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80015ac:	6253      	str	r3, [r2, #36]	; 0x24

	//SPI_SDO(PC2)(POCI)
	REG_SET_VAL(LCD_SDO_PORT->MODER,2U,0x3U,(LCD_SDO_PIN * 2U));
 80015ae:	4b33      	ldr	r3, [pc, #204]	; (800167c <lcd_pin_init+0x21c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a32      	ldr	r2, [pc, #200]	; (800167c <lcd_pin_init+0x21c>)
 80015b4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b30      	ldr	r3, [pc, #192]	; (800167c <lcd_pin_init+0x21c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a2f      	ldr	r2, [pc, #188]	; (800167c <lcd_pin_init+0x21c>)
 80015c0:	f043 0320 	orr.w	r3, r3, #32
 80015c4:	6013      	str	r3, [r2, #0]
	REG_CLR_BIT(LCD_SDO_PORT->OTYPER,LCD_SDO_PIN);
 80015c6:	4b2d      	ldr	r3, [pc, #180]	; (800167c <lcd_pin_init+0x21c>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4a2c      	ldr	r2, [pc, #176]	; (800167c <lcd_pin_init+0x21c>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	6053      	str	r3, [r2, #4]
	REG_SET_VAL(LCD_SDO_PORT->OSPEEDR,2U,0x3U,(LCD_SDO_PIN * 2U));
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <lcd_pin_init+0x21c>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	4a29      	ldr	r2, [pc, #164]	; (800167c <lcd_pin_init+0x21c>)
 80015d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015dc:	6093      	str	r3, [r2, #8]
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <lcd_pin_init+0x21c>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	4a26      	ldr	r2, [pc, #152]	; (800167c <lcd_pin_init+0x21c>)
 80015e4:	f043 0320 	orr.w	r3, r3, #32
 80015e8:	6093      	str	r3, [r2, #8]
	REG_SET_VAL(LCD_SDO_PORT->AFR[0],5U,0xFU,(LCD_SDO_PIN * 4U));
 80015ea:	4b24      	ldr	r3, [pc, #144]	; (800167c <lcd_pin_init+0x21c>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4a23      	ldr	r2, [pc, #140]	; (800167c <lcd_pin_init+0x21c>)
 80015f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015f4:	6213      	str	r3, [r2, #32]
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <lcd_pin_init+0x21c>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4a20      	ldr	r2, [pc, #128]	; (800167c <lcd_pin_init+0x21c>)
 80015fc:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001600:	6213      	str	r3, [r2, #32]
	REG_CLR_BIT(LCD_CSX_PORT->OTYPER,LCD_CSX_PIN);
	REG_SET_VAL(LCD_CSX_PORT->OSPEEDR,2U,0x3U,(LCD_CSX_PIN * 2U));
	REG_SET_VAL(LCD_CSX_PORT->AFR[1],5U,0xFU,((LCD_CSX_PIN % 8) * 4U));
#else
	//CSX
	REG_SET_VAL(LCD_CSX_PORT->MODER,0x1U,0x3,(LCD_CSX_PIN * 2U)); 		/*mode*/
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <lcd_pin_init+0x218>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <lcd_pin_init+0x218>)
 8001608:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <lcd_pin_init+0x218>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a19      	ldr	r2, [pc, #100]	; (8001678 <lcd_pin_init+0x218>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001618:	6013      	str	r3, [r2, #0]
	REG_CLR_BIT(LCD_CSX_PORT->OTYPER,LCD_CSX_PIN); 						/*Output type*/
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <lcd_pin_init+0x218>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4a16      	ldr	r2, [pc, #88]	; (8001678 <lcd_pin_init+0x218>)
 8001620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001624:	6053      	str	r3, [r2, #4]
	REG_SET_VAL(LCD_CSX_PORT->OSPEEDR,2U,0x3U,(LCD_CSX_PIN * 2U)); 		/*speed*/
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <lcd_pin_init+0x218>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	4a13      	ldr	r2, [pc, #76]	; (8001678 <lcd_pin_init+0x218>)
 800162c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001630:	6093      	str	r3, [r2, #8]
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <lcd_pin_init+0x218>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	4a10      	ldr	r2, [pc, #64]	; (8001678 <lcd_pin_init+0x218>)
 8001638:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800163c:	6093      	str	r3, [r2, #8]
	//CSX = HIGH
	REG_SET_BIT(LCD_CSX_PORT->ODR,LCD_CSX_PIN);
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <lcd_pin_init+0x218>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <lcd_pin_init+0x218>)
 8001644:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001648:	6153      	str	r3, [r2, #20]
#endif

	//RESX = HIGH
	REG_SET_BIT(LCD_RESX_PORT->ODR,LCD_RESX_PIN);
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <lcd_pin_init+0x214>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a09      	ldr	r2, [pc, #36]	; (8001674 <lcd_pin_init+0x214>)
 8001650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001654:	6153      	str	r3, [r2, #20]
	//D/CX = HIGH
	REG_SET_BIT(LCD_DCX_PORT->ODR,LCD_DCX_PIN);
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <lcd_pin_init+0x214>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	4a06      	ldr	r2, [pc, #24]	; (8001674 <lcd_pin_init+0x214>)
 800165c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001660:	6153      	str	r3, [r2, #20]

}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40020c00 	.word	0x40020c00
 8001678:	40020400 	.word	0x40020400
 800167c:	40020800 	.word	0x40020800

08001680 <lcd_spi_enable>:

 void lcd_spi_enable(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
	__enable_spi();
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <lcd_spi_enable+0x1c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <lcd_spi_enable+0x1c>)
 800168a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40003800 	.word	0x40003800

080016a0 <lcd_spi_init>:



 void lcd_spi_init(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
	SPI_TypeDef *pSPI = SPI;
 80016a6:	4b28      	ldr	r3, [pc, #160]	; (8001748 <lcd_spi_init+0xa8>)
 80016a8:	607b      	str	r3, [r7, #4]
	RCC_TypeDef *pRCC = RCC;
 80016aa:	4b28      	ldr	r3, [pc, #160]	; (800174c <lcd_spi_init+0xac>)
 80016ac:	603b      	str	r3, [r7, #0]

	REG_SET_BIT(pRCC->APB1ENR,RCC_APB1ENR_SPI2EN_Pos);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40

	REG_SET_BIT(pSPI->CR1,SPI_CR1_MSTR_Pos); 		/*Controller mode*/
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f043 0204 	orr.w	r2, r3, #4
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_BIDIMODE_Pos);    /* 2 lines uni directional lines*/
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_DFF_Pos);			/* DFF = 8bits */
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_SSM_Pos);			/* SSM enable */
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_SSI_Pos);			/* SSI enable */
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_LSBFIRST_Pos);     /* Send msb first */
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]
	REG_SET_VAL(pSPI->CR1,0x00U,0x7U,SPI_CR1_BR_Pos); /* SPI clck = 42MHz/2 ==> 21 MHz */
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_CPOL_Pos); 		 /* CPOL = 0 */
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 0202 	bic.w	r2, r3, #2
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_CPHA_Pos); 		 /* CPHA = 0 */
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 0201 	bic.w	r2, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR2,SPI_CR2_FRF_Pos);			 /* SPI Motorola frame format*/
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f023 0210 	bic.w	r2, r3, #16
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	605a      	str	r2, [r3, #4]

#if (BSP_LCD_CS_MANAGE == AUTO)
	__disable_spi_ssm();
	__enable_spi_ssoe();
#endif
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40003800 	.word	0x40003800
 800174c:	40023800 	.word	0x40023800

08001750 <delay_50ms>:

static void delay_50ms(void){
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i<(0xFFFFU * 10U);i++);
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	e002      	b.n	8001762 <delay_50ms+0x12>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3301      	adds	r3, #1
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <delay_50ms+0x28>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d9f8      	bls.n	800175c <delay_50ms+0xc>
}
 800176a:	bf00      	nop
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	0009fff5 	.word	0x0009fff5

0800177c <lcd_reset>:

 void lcd_reset(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
	LCD_RESX_LOW();
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <lcd_reset+0x54>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <lcd_reset+0x54>)
 8001788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800178c:	6153      	str	r3, [r2, #20]
	for(uint32_t i = 0 ; i<(0xFFFFU * 10U);i++);
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	e002      	b.n	800179a <lcd_reset+0x1e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3301      	adds	r3, #1
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <lcd_reset+0x58>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d9f8      	bls.n	8001794 <lcd_reset+0x18>
	LCD_RESX_HIGH();
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <lcd_reset+0x54>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <lcd_reset+0x54>)
 80017a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ac:	6153      	str	r3, [r2, #20]
	for(uint32_t i = 0 ; i<(0xFFFFU * 10U);i++);
 80017ae:	2300      	movs	r3, #0
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	e002      	b.n	80017ba <lcd_reset+0x3e>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <lcd_reset+0x58>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d9f8      	bls.n	80017b4 <lcd_reset+0x38>
}
 80017c2:	bf00      	nop
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40020c00 	.word	0x40020c00
 80017d4:	0009fff5 	.word	0x0009fff5

080017d8 <lcd_config>:

 void lcd_config(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
	uint8_t params[15];
	lcd_write_cmd(ILI9341_SWRESET);
 80017de:	2001      	movs	r0, #1
 80017e0:	f000 f92c 	bl	8001a3c <lcd_write_cmd>
	lcd_write_cmd(ILI9341_POWERB);
 80017e4:	20cf      	movs	r0, #207	; 0xcf
 80017e6:	f000 f929 	bl	8001a3c <lcd_write_cmd>
	params[0] = 0x00;
 80017ea:	2300      	movs	r3, #0
 80017ec:	703b      	strb	r3, [r7, #0]
	params[1] = 0xD9;
 80017ee:	23d9      	movs	r3, #217	; 0xd9
 80017f0:	707b      	strb	r3, [r7, #1]
	params[2] = 0x30;
 80017f2:	2330      	movs	r3, #48	; 0x30
 80017f4:	70bb      	strb	r3, [r7, #2]
	lcd_write_data(params, 3);
 80017f6:	463b      	mov	r3, r7
 80017f8:	2103      	movs	r1, #3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f962 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_POWER_SEQ);
 8001800:	20ed      	movs	r0, #237	; 0xed
 8001802:	f000 f91b 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0x64;
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	703b      	strb	r3, [r7, #0]
	params[1]= 0x03;
 800180a:	2303      	movs	r3, #3
 800180c:	707b      	strb	r3, [r7, #1]
	params[2]= 0X12;
 800180e:	2312      	movs	r3, #18
 8001810:	70bb      	strb	r3, [r7, #2]
	params[3]= 0X81;
 8001812:	2381      	movs	r3, #129	; 0x81
 8001814:	70fb      	strb	r3, [r7, #3]
	lcd_write_data(params, 4);
 8001816:	463b      	mov	r3, r7
 8001818:	2104      	movs	r1, #4
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f952 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_DTCA);
 8001820:	20e8      	movs	r0, #232	; 0xe8
 8001822:	f000 f90b 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0x85;
 8001826:	2385      	movs	r3, #133	; 0x85
 8001828:	703b      	strb	r3, [r7, #0]
	params[1]= 0x10;
 800182a:	2310      	movs	r3, #16
 800182c:	707b      	strb	r3, [r7, #1]
	params[2]= 0x7A;
 800182e:	237a      	movs	r3, #122	; 0x7a
 8001830:	70bb      	strb	r3, [r7, #2]
	lcd_write_data(params, 3);
 8001832:	463b      	mov	r3, r7
 8001834:	2103      	movs	r1, #3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f944 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_POWERA);
 800183c:	20cb      	movs	r0, #203	; 0xcb
 800183e:	f000 f8fd 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0x39;
 8001842:	2339      	movs	r3, #57	; 0x39
 8001844:	703b      	strb	r3, [r7, #0]
	params[1]= 0x2C;
 8001846:	232c      	movs	r3, #44	; 0x2c
 8001848:	707b      	strb	r3, [r7, #1]
	params[2]= 0x00;
 800184a:	2300      	movs	r3, #0
 800184c:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x34;
 800184e:	2334      	movs	r3, #52	; 0x34
 8001850:	70fb      	strb	r3, [r7, #3]
	params[4]= 0x02;
 8001852:	2302      	movs	r3, #2
 8001854:	713b      	strb	r3, [r7, #4]
	lcd_write_data(params, 5);
 8001856:	463b      	mov	r3, r7
 8001858:	2105      	movs	r1, #5
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f932 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_PRC);
 8001860:	20f7      	movs	r0, #247	; 0xf7
 8001862:	f000 f8eb 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0x20;
 8001866:	2320      	movs	r3, #32
 8001868:	703b      	strb	r3, [r7, #0]
	lcd_write_data(params, 1);
 800186a:	463b      	mov	r3, r7
 800186c:	2101      	movs	r1, #1
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f928 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_DTCB);
 8001874:	20ea      	movs	r0, #234	; 0xea
 8001876:	f000 f8e1 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0x00;
 800187a:	2300      	movs	r3, #0
 800187c:	703b      	strb	r3, [r7, #0]
	params[1]= 0x00;
 800187e:	2300      	movs	r3, #0
 8001880:	707b      	strb	r3, [r7, #1]
	lcd_write_data(params, 2);
 8001882:	463b      	mov	r3, r7
 8001884:	2102      	movs	r1, #2
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f91c 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_POWER1);
 800188c:	20c0      	movs	r0, #192	; 0xc0
 800188e:	f000 f8d5 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0x1B;
 8001892:	231b      	movs	r3, #27
 8001894:	703b      	strb	r3, [r7, #0]
	lcd_write_data(params, 1);
 8001896:	463b      	mov	r3, r7
 8001898:	2101      	movs	r1, #1
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f912 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_POWER2);
 80018a0:	20c1      	movs	r0, #193	; 0xc1
 80018a2:	f000 f8cb 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0x12;
 80018a6:	2312      	movs	r3, #18
 80018a8:	703b      	strb	r3, [r7, #0]
	lcd_write_data(params, 1);
 80018aa:	463b      	mov	r3, r7
 80018ac:	2101      	movs	r1, #1
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f908 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_VCOM1);
 80018b4:	20c5      	movs	r0, #197	; 0xc5
 80018b6:	f000 f8c1 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0x08;
 80018ba:	2308      	movs	r3, #8
 80018bc:	703b      	strb	r3, [r7, #0]
	params[1]= 0x26;
 80018be:	2326      	movs	r3, #38	; 0x26
 80018c0:	707b      	strb	r3, [r7, #1]
	lcd_write_data(params, 2);
 80018c2:	463b      	mov	r3, r7
 80018c4:	2102      	movs	r1, #2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f8fc 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_VCOM2);
 80018cc:	20c7      	movs	r0, #199	; 0xc7
 80018ce:	f000 f8b5 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0XB7;
 80018d2:	23b7      	movs	r3, #183	; 0xb7
 80018d4:	703b      	strb	r3, [r7, #0]
	lcd_write_data(params, 1);
 80018d6:	463b      	mov	r3, r7
 80018d8:	2101      	movs	r1, #1
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f8f2 	bl	8001ac4 <lcd_write_data>


	lcd_write_cmd(ILI9341_PIXEL_FORMAT);
 80018e0:	203a      	movs	r0, #58	; 0x3a
 80018e2:	f000 f8ab 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0x55; //select RGB565
 80018e6:	2355      	movs	r3, #85	; 0x55
 80018e8:	703b      	strb	r3, [r7, #0]
	lcd_write_data(params, 1);
 80018ea:	463b      	mov	r3, r7
 80018ec:	2101      	movs	r1, #1
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f8e8 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_FRMCTR1);
 80018f4:	20b1      	movs	r0, #177	; 0xb1
 80018f6:	f000 f8a1 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0x00;
 80018fa:	2300      	movs	r3, #0
 80018fc:	703b      	strb	r3, [r7, #0]
	params[1]= 0x1B;//frame rate = 70
 80018fe:	231b      	movs	r3, #27
 8001900:	707b      	strb	r3, [r7, #1]
	lcd_write_data(params, 2);
 8001902:	463b      	mov	r3, r7
 8001904:	2102      	movs	r1, #2
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f8dc 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_DFC);    // Display Function Control
 800190c:	20b6      	movs	r0, #182	; 0xb6
 800190e:	f000 f895 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0x0A;
 8001912:	230a      	movs	r3, #10
 8001914:	703b      	strb	r3, [r7, #0]
	params[1]= 0xA2;
 8001916:	23a2      	movs	r3, #162	; 0xa2
 8001918:	707b      	strb	r3, [r7, #1]
	lcd_write_data(params, 2);
 800191a:	463b      	mov	r3, r7
 800191c:	2102      	movs	r1, #2
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f8d0 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_3GAMMA_EN);    // 3Gamma Function Disable
 8001924:	20f2      	movs	r0, #242	; 0xf2
 8001926:	f000 f889 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0x02; //LCD_WR_DATA(0x00);
 800192a:	2302      	movs	r3, #2
 800192c:	703b      	strb	r3, [r7, #0]
	lcd_write_data(params, 1);
 800192e:	463b      	mov	r3, r7
 8001930:	2101      	movs	r1, #1
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f8c6 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_GAMMA);
 8001938:	2026      	movs	r0, #38	; 0x26
 800193a:	f000 f87f 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0x01;
 800193e:	2301      	movs	r3, #1
 8001940:	703b      	strb	r3, [r7, #0]
	lcd_write_data(params, 1);
 8001942:	463b      	mov	r3, r7
 8001944:	2101      	movs	r1, #1
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f8bc 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_PGAMMA);    //Set Gamma
 800194c:	20e0      	movs	r0, #224	; 0xe0
 800194e:	f000 f875 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0x0F;
 8001952:	230f      	movs	r3, #15
 8001954:	703b      	strb	r3, [r7, #0]
	params[1]= 0x1D;
 8001956:	231d      	movs	r3, #29
 8001958:	707b      	strb	r3, [r7, #1]
	params[2]= 0x1A;
 800195a:	231a      	movs	r3, #26
 800195c:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x0A;
 800195e:	230a      	movs	r3, #10
 8001960:	70fb      	strb	r3, [r7, #3]
	params[4]= 0x0D;
 8001962:	230d      	movs	r3, #13
 8001964:	713b      	strb	r3, [r7, #4]
	params[5]= 0x07;
 8001966:	2307      	movs	r3, #7
 8001968:	717b      	strb	r3, [r7, #5]
	params[6]= 0x49;
 800196a:	2349      	movs	r3, #73	; 0x49
 800196c:	71bb      	strb	r3, [r7, #6]
	params[7]= 0X66;
 800196e:	2366      	movs	r3, #102	; 0x66
 8001970:	71fb      	strb	r3, [r7, #7]
	params[8]= 0x3B;
 8001972:	233b      	movs	r3, #59	; 0x3b
 8001974:	723b      	strb	r3, [r7, #8]
	params[9]= 0x07;
 8001976:	2307      	movs	r3, #7
 8001978:	727b      	strb	r3, [r7, #9]
	params[10]= 0x11;
 800197a:	2311      	movs	r3, #17
 800197c:	72bb      	strb	r3, [r7, #10]
	params[11]= 0x01;
 800197e:	2301      	movs	r3, #1
 8001980:	72fb      	strb	r3, [r7, #11]
	params[12]= 0x09;
 8001982:	2309      	movs	r3, #9
 8001984:	733b      	strb	r3, [r7, #12]
	params[13]= 0x05;
 8001986:	2305      	movs	r3, #5
 8001988:	737b      	strb	r3, [r7, #13]
	params[14]= 0x04;
 800198a:	2304      	movs	r3, #4
 800198c:	73bb      	strb	r3, [r7, #14]
	lcd_write_data(params, 15);
 800198e:	463b      	mov	r3, r7
 8001990:	210f      	movs	r1, #15
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f896 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_NGAMMA);
 8001998:	20e1      	movs	r0, #225	; 0xe1
 800199a:	f000 f84f 	bl	8001a3c <lcd_write_cmd>
	params[0]= 0x00;
 800199e:	2300      	movs	r3, #0
 80019a0:	703b      	strb	r3, [r7, #0]
	params[1]= 0x18;
 80019a2:	2318      	movs	r3, #24
 80019a4:	707b      	strb	r3, [r7, #1]
	params[2]= 0x1D;
 80019a6:	231d      	movs	r3, #29
 80019a8:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x02;
 80019aa:	2302      	movs	r3, #2
 80019ac:	70fb      	strb	r3, [r7, #3]
	params[4]= 0x0F;
 80019ae:	230f      	movs	r3, #15
 80019b0:	713b      	strb	r3, [r7, #4]
	params[5]= 0x04;
 80019b2:	2304      	movs	r3, #4
 80019b4:	717b      	strb	r3, [r7, #5]
	params[6]= 0x36;
 80019b6:	2336      	movs	r3, #54	; 0x36
 80019b8:	71bb      	strb	r3, [r7, #6]
	params[7]= 0x13;
 80019ba:	2313      	movs	r3, #19
 80019bc:	71fb      	strb	r3, [r7, #7]
	params[8]= 0x4C;
 80019be:	234c      	movs	r3, #76	; 0x4c
 80019c0:	723b      	strb	r3, [r7, #8]
	params[9]= 0x07;
 80019c2:	2307      	movs	r3, #7
 80019c4:	727b      	strb	r3, [r7, #9]
	params[10]= 0x13;
 80019c6:	2313      	movs	r3, #19
 80019c8:	72bb      	strb	r3, [r7, #10]
	params[11]= 0x0F;
 80019ca:	230f      	movs	r3, #15
 80019cc:	72fb      	strb	r3, [r7, #11]
	params[12]= 0x2E;
 80019ce:	232e      	movs	r3, #46	; 0x2e
 80019d0:	733b      	strb	r3, [r7, #12]
	params[13]= 0x2F;
 80019d2:	232f      	movs	r3, #47	; 0x2f
 80019d4:	737b      	strb	r3, [r7, #13]
	params[14]= 0x05;
 80019d6:	2305      	movs	r3, #5
 80019d8:	73bb      	strb	r3, [r7, #14]
	lcd_write_data(params, 15);
 80019da:	463b      	mov	r3, r7
 80019dc:	210f      	movs	r1, #15
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f870 	bl	8001ac4 <lcd_write_data>

	lcd_write_cmd(ILI9341_SLEEP_OUT); //Exit Sleep
 80019e4:	2011      	movs	r0, #17
 80019e6:	f000 f829 	bl	8001a3c <lcd_write_cmd>
	delay_50ms();
 80019ea:	f7ff feb1 	bl	8001750 <delay_50ms>
	delay_50ms();
 80019ee:	f7ff feaf 	bl	8001750 <delay_50ms>
	lcd_write_cmd(ILI9341_DISPLAY_ON); //display on
 80019f2:	2029      	movs	r0, #41	; 0x29
 80019f4:	f000 f822 	bl	8001a3c <lcd_write_cmd>

}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <lcd_set_orientation>:



 void lcd_set_orientation(uint8_t orientation)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	uint8_t param;

	if(orientation == LANDSCAPE){
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d102      	bne.n	8001a16 <lcd_set_orientation+0x16>
		param = MADCTL_MV | MADCTL_MY | MADCTL_BGR; /*Memory Access Control <Landscape setting>*/
 8001a10:	23a8      	movs	r3, #168	; 0xa8
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	e004      	b.n	8001a20 <lcd_set_orientation+0x20>
	}else if(orientation == PORTRAIT){
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <lcd_set_orientation+0x20>
		param = MADCTL_MY| MADCTL_MX| MADCTL_BGR;  /* Memory Access Control <portrait setting> */
 8001a1c:	23c8      	movs	r3, #200	; 0xc8
 8001a1e:	73fb      	strb	r3, [r7, #15]
	}

	lcd_write_cmd(ILI9341_MAC);    // Memory Access Control command
 8001a20:	2036      	movs	r0, #54	; 0x36
 8001a22:	f000 f80b 	bl	8001a3c <lcd_write_cmd>
	lcd_write_data(&param, 1);
 8001a26:	f107 030f 	add.w	r3, r7, #15
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 f849 	bl	8001ac4 <lcd_write_data>
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <lcd_write_cmd>:

 void lcd_write_cmd(uint8_t cmd)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *pSPI = SPI;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <lcd_write_cmd+0x7c>)
 8001a48:	60fb      	str	r3, [r7, #12]
	LCD_CSX_LOW();
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <lcd_write_cmd+0x80>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <lcd_write_cmd+0x80>)
 8001a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a54:	6153      	str	r3, [r2, #20]
	LCD_DCX_LOW(); //DCX = 0 , for command
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <lcd_write_cmd+0x84>)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <lcd_write_cmd+0x84>)
 8001a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a60:	6153      	str	r3, [r2, #20]
	while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8001a62:	bf00      	nop
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f9      	beq.n	8001a64 <lcd_write_cmd+0x28>
	REG_WRITE(pSPI->DR,cmd);
 8001a70:	79fa      	ldrb	r2, [r7, #7]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	60da      	str	r2, [r3, #12]
	while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8001a76:	bf00      	nop
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f9      	beq.n	8001a78 <lcd_write_cmd+0x3c>
	while(REG_READ_BIT(pSPI->SR,SPI_SR_BSY_Pos));
 8001a84:	bf00      	nop
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f9      	bne.n	8001a86 <lcd_write_cmd+0x4a>
	LCD_DCX_HIGH();
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <lcd_write_cmd+0x84>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <lcd_write_cmd+0x84>)
 8001a98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a9c:	6153      	str	r3, [r2, #20]
	LCD_CSX_HIGH();
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <lcd_write_cmd+0x80>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4a06      	ldr	r2, [pc, #24]	; (8001abc <lcd_write_cmd+0x80>)
 8001aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa8:	6153      	str	r3, [r2, #20]

}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40003800 	.word	0x40003800
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020c00 	.word	0x40020c00

08001ac4 <lcd_write_data>:

 void lcd_write_data(uint8_t *buffer,uint32_t len)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
	SPI_TypeDef *pSPI = SPI;
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <lcd_write_data+0x80>)
 8001ad0:	60bb      	str	r3, [r7, #8]
	LCD_CSX_LOW();
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <lcd_write_data+0x84>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <lcd_write_data+0x84>)
 8001ad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001adc:	6153      	str	r3, [r2, #20]
	for(uint32_t i = 0 ; i < len ;i++){
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	e010      	b.n	8001b06 <lcd_write_data+0x42>
		while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8001ae4:	bf00      	nop
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f9      	beq.n	8001ae6 <lcd_write_data+0x22>
		REG_WRITE(pSPI->DR,buffer[i]);
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60da      	str	r2, [r3, #12]
	for(uint32_t i = 0 ; i < len ;i++){
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	3301      	adds	r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3ea      	bcc.n	8001ae4 <lcd_write_data+0x20>
	}
	while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8001b0e:	bf00      	nop
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f9      	beq.n	8001b10 <lcd_write_data+0x4c>
	while(REG_READ_BIT(pSPI->SR,SPI_SR_BSY_Pos));
 8001b1c:	bf00      	nop
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f9      	bne.n	8001b1e <lcd_write_data+0x5a>
	LCD_CSX_HIGH();
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <lcd_write_data+0x84>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <lcd_write_data+0x84>)
 8001b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b34:	6153      	str	r3, [r2, #20]
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40003800 	.word	0x40003800
 8001b48:	40020400 	.word	0x40020400

08001b4c <bsp_lcd_set_display_area>:


 void bsp_lcd_set_display_area(uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2)
 {
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4604      	mov	r4, r0
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	80fb      	strh	r3, [r7, #6]
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80bb      	strh	r3, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	807b      	strh	r3, [r7, #2]
 8001b66:	4613      	mov	r3, r2
 8001b68:	803b      	strh	r3, [r7, #0]
	 lcd_area_t area;
	 area.x1 = x1;
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	813b      	strh	r3, [r7, #8]
	 area.x2 = x2;
 8001b6e:	88bb      	ldrh	r3, [r7, #4]
 8001b70:	817b      	strh	r3, [r7, #10]
	 area.y1 = y1;
 8001b72:	887b      	ldrh	r3, [r7, #2]
 8001b74:	81bb      	strh	r3, [r7, #12]
	 area.y2 = y2;
 8001b76:	883b      	ldrh	r3, [r7, #0]
 8001b78:	81fb      	strh	r3, [r7, #14]
	 lcd_set_display_area(&area);
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f804 	bl	8001b8c <lcd_set_display_area>
 }
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd90      	pop	{r4, r7, pc}

08001b8c <lcd_set_display_area>:

void lcd_set_display_area(lcd_area_t *area)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	uint8_t params[4];
	/*Column address set(2Ah) */
	params[0] = HIGH_16(area->x1);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	733b      	strb	r3, [r7, #12]
	params[1] = LOW_16(area->x1);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	737b      	strb	r3, [r7, #13]
	params[2] = HIGH_16(area->x2);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	885b      	ldrh	r3, [r3, #2]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	73bb      	strb	r3, [r7, #14]
	params[3] = LOW_16(area->x2);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	885b      	ldrh	r3, [r3, #2]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	73fb      	strb	r3, [r7, #15]
	lcd_write_cmd(ILI9341_CASET);
 8001bbc:	202a      	movs	r0, #42	; 0x2a
 8001bbe:	f7ff ff3d 	bl	8001a3c <lcd_write_cmd>
	lcd_write_data(params, 4);
 8001bc2:	f107 030c 	add.w	r3, r7, #12
 8001bc6:	2104      	movs	r1, #4
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff7b 	bl	8001ac4 <lcd_write_data>

	params[0] = HIGH_16(area->y1);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	889b      	ldrh	r3, [r3, #4]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	733b      	strb	r3, [r7, #12]
	params[1] = LOW_16(area->y1);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	889b      	ldrh	r3, [r3, #4]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	737b      	strb	r3, [r7, #13]
	params[2] = HIGH_16(area->y2);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	88db      	ldrh	r3, [r3, #6]
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	73bb      	strb	r3, [r7, #14]
	params[3] = LOW_16(area->y2);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	88db      	ldrh	r3, [r3, #6]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	73fb      	strb	r3, [r7, #15]
	lcd_write_cmd(ILI9341_RASET);
 8001bf6:	202b      	movs	r0, #43	; 0x2b
 8001bf8:	f7ff ff20 	bl	8001a3c <lcd_write_cmd>
	lcd_write_data(params, 4);
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	2104      	movs	r1, #4
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff5e 	bl	8001ac4 <lcd_write_data>

}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <lcd_buffer_init>:

void lcd_buffer_init(bsp_lcd_t *lcd)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	lcd->draw_buffer1 = bsp_db;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <lcd_buffer_init+0x2c>)
 8001c1c:	605a      	str	r2, [r3, #4]
	lcd->draw_buffer2 = bsp_wb;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <lcd_buffer_init+0x30>)
 8001c22:	609a      	str	r2, [r3, #8]
	lcd->buff_to_draw = NULL;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
	lcd->buff_to_flush = NULL;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	615a      	str	r2, [r3, #20]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	20000058 	.word	0x20000058
 8001c40:	20002858 	.word	0x20002858

08001c44 <lcd_dma_init>:

void lcd_dma_init(bsp_lcd_t *lcd)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
#if (USE_DMA == 1)
	initialize_lcd_write_dma((uint32_t)bsp_wb,(uint32_t)&SPI2->DR);
#endif
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <DMA_TransferError>:
}

/////////////////////////////////////////////////////DMA functions///////////////////////////////////////////

__attribute__((weak)) void DMA_TransferError(bsp_lcd_t *lcd)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	UNUSED(lcd);
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <DMA_TransferComplete>:

__attribute__((weak)) void DMA_TransferComplete(bsp_lcd_t *lcd)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	UNUSED(lcd);
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <dma_lcd_write_error>:
	__enable_dma(pStream);
	REG_SET_BIT(SPI->CR2,SPI_CR2_TXDMAEN_Pos);
}

static void dma_lcd_write_error(bsp_lcd_t *lcd)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	DMA_TransferError(lcd);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ffe5 	bl	8001c58 <DMA_TransferError>
	while(1);
 8001c8e:	e7fe      	b.n	8001c8e <dma_lcd_write_error+0xe>

08001c90 <dma_cmplt_callback_spi_write>:
}



static void dma_cmplt_callback_spi_write(bsp_lcd_t *lcd)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	lcd->buff_to_flush = NULL;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	615a      	str	r2, [r3, #20]
	 LCD_CSX_HIGH();
	__disable_spi();
	__spi_set_dff_8bit();
	__enable_spi();
#endif
	DMA_TransferComplete(lcd);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffe4 	bl	8001c6c <DMA_TransferComplete>
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <DMA1_Stream4_IRQHandler>:
}



void dma_lcd_write_irq_handler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
	uint32_t tmp;
	DMA_TypeDef *pDMA = DMA1;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <DMA1_Stream4_IRQHandler+0x70>)
 8001cb4:	607b      	str	r3, [r7, #4]
	tmp = pDMA->HISR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	603b      	str	r3, [r7, #0]
	if(REG_READ_BIT(tmp,DMA_HISR_TCIF4_Pos)){
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <DMA1_Stream4_IRQHandler+0x2e>
		REG_SET_BIT(pDMA->HIFCR,DMA_HIFCR_CTCIF4_Pos);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f043 0220 	orr.w	r2, r3, #32
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60da      	str	r2, [r3, #12]
		dma_cmplt_callback_spi_write(&lcd_handle);
 8001cd2:	4813      	ldr	r0, [pc, #76]	; (8001d20 <DMA1_Stream4_IRQHandler+0x74>)
 8001cd4:	f7ff ffdc 	bl	8001c90 <dma_cmplt_callback_spi_write>

	else if(REG_READ_BIT(tmp,DMA_HISR_FEIF4_Pos)){
		REG_SET_BIT(pDMA->HIFCR,DMA_HIFCR_CFEIF4_Pos);
		dma_lcd_write_error(&lcd_handle);
	}
}
 8001cd8:	e01c      	b.n	8001d14 <DMA1_Stream4_IRQHandler+0x68>
	else if(REG_READ_BIT(tmp,DMA_HISR_TEIF4_Pos)){
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <DMA1_Stream4_IRQHandler+0x4c>
		REG_SET_BIT(pDMA->HIFCR,DMA_HIFCR_CTEIF4_Pos);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f043 0208 	orr.w	r2, r3, #8
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	60da      	str	r2, [r3, #12]
		dma_lcd_write_error(&lcd_handle);
 8001cf0:	480b      	ldr	r0, [pc, #44]	; (8001d20 <DMA1_Stream4_IRQHandler+0x74>)
 8001cf2:	f7ff ffc5 	bl	8001c80 <dma_lcd_write_error>
}
 8001cf6:	e00d      	b.n	8001d14 <DMA1_Stream4_IRQHandler+0x68>
	else if(REG_READ_BIT(tmp,DMA_HISR_FEIF4_Pos)){
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <DMA1_Stream4_IRQHandler+0x68>
		REG_SET_BIT(pDMA->HIFCR,DMA_HIFCR_CFEIF4_Pos);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f043 0201 	orr.w	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60da      	str	r2, [r3, #12]
		dma_lcd_write_error(&lcd_handle);
 8001d0e:	4804      	ldr	r0, [pc, #16]	; (8001d20 <DMA1_Stream4_IRQHandler+0x74>)
 8001d10:	f7ff ffb6 	bl	8001c80 <dma_lcd_write_error>
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40026000 	.word	0x40026000
 8001d20:	20000030 	.word	0x20000030

08001d24 <__libc_init_array>:
 8001d24:	b570      	push	{r4, r5, r6, lr}
 8001d26:	4d0d      	ldr	r5, [pc, #52]	; (8001d5c <__libc_init_array+0x38>)
 8001d28:	4c0d      	ldr	r4, [pc, #52]	; (8001d60 <__libc_init_array+0x3c>)
 8001d2a:	1b64      	subs	r4, r4, r5
 8001d2c:	10a4      	asrs	r4, r4, #2
 8001d2e:	2600      	movs	r6, #0
 8001d30:	42a6      	cmp	r6, r4
 8001d32:	d109      	bne.n	8001d48 <__libc_init_array+0x24>
 8001d34:	4d0b      	ldr	r5, [pc, #44]	; (8001d64 <__libc_init_array+0x40>)
 8001d36:	4c0c      	ldr	r4, [pc, #48]	; (8001d68 <__libc_init_array+0x44>)
 8001d38:	f000 f820 	bl	8001d7c <_init>
 8001d3c:	1b64      	subs	r4, r4, r5
 8001d3e:	10a4      	asrs	r4, r4, #2
 8001d40:	2600      	movs	r6, #0
 8001d42:	42a6      	cmp	r6, r4
 8001d44:	d105      	bne.n	8001d52 <__libc_init_array+0x2e>
 8001d46:	bd70      	pop	{r4, r5, r6, pc}
 8001d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d4c:	4798      	blx	r3
 8001d4e:	3601      	adds	r6, #1
 8001d50:	e7ee      	b.n	8001d30 <__libc_init_array+0xc>
 8001d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d56:	4798      	blx	r3
 8001d58:	3601      	adds	r6, #1
 8001d5a:	e7f2      	b.n	8001d42 <__libc_init_array+0x1e>
 8001d5c:	080725ac 	.word	0x080725ac
 8001d60:	080725ac 	.word	0x080725ac
 8001d64:	080725ac 	.word	0x080725ac
 8001d68:	080725b0 	.word	0x080725b0

08001d6c <memset>:
 8001d6c:	4402      	add	r2, r0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d100      	bne.n	8001d76 <memset+0xa>
 8001d74:	4770      	bx	lr
 8001d76:	f803 1b01 	strb.w	r1, [r3], #1
 8001d7a:	e7f9      	b.n	8001d70 <memset+0x4>

08001d7c <_init>:
 8001d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7e:	bf00      	nop
 8001d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d82:	bc08      	pop	{r3}
 8001d84:	469e      	mov	lr, r3
 8001d86:	4770      	bx	lr

08001d88 <_fini>:
 8001d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8a:	bf00      	nop
 8001d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d8e:	bc08      	pop	{r3}
 8001d90:	469e      	mov	lr, r3
 8001d92:	4770      	bx	lr
